config:
  authentication:
    builtin:
      # Allow users to signup for a new Paperless-ngx account.
      # Defaults to False
      allowSignups:

      # A comma-separated list of group names that users will be added to when they sign up
      # for a new account. Groups listed here must already exist.
      # Defaults to None
      defaultGroups:

    email:
      # Determines whether email addresses are verified during signup (as performed by Django allauth).
      # See the relevant paperless settings and the allauth docs
      # Defaults to 'optional'
      # Note: If you do not have a working email server set up this will be set to 'none'.
      signupVerification:

      # Configures whether password reset attempts for email addresses which do not have an account
      # result in sending an email.
      # See the relevant django-allauth documentation
      # Defaults to True (from allauth)
      unknownAccounts:

    session:
      # Login session cookie expiration. Applies if PAPERLESS_ACCOUNT_SESSION_REMEMBER is enabled.
      # See the corresponding django documentation
      # Defaults to 1209600 (2 weeks)
      cookieAge:

      # If false, sessions will expire at browser close, if true will use PAPERLESS_SESSION_COOKIE_AGE
      # for expiration. See the corresponding django-allauth documentation
      # Defaults to True
      remember:

    sso:
      # Sync groups from the third party authentication system (e.g. OIDC) to Paperless-ngx.
      # When enabled, users will be added or removed from groups based on their group membership
      # in the third party authentication system. Groups must already exist in Paperless-ngx and
      # have the same name as in the third party authentication system. Groups are updated upon
      # logging in via the third party authentication system, see the corresponding django-allauth
      # documentation.
      # In order to pass groups from the authentication system you will need to update your
      # PAPERLESS_SOCIALACCOUNT_PROVIDERS setting by adding a top-level "SCOPES" setting which
      # includes "groups", e.g.:
      #    {"openid_connect":{"SCOPE": ["openid","profile","email","groups"]...
      # Defaults to False
      accountSyncGroups:

      # Allow users to signup for a new Paperless-ngx account using any setup third party
      # authentication systems.
      # Defaults to True
      allowSignups:

      # Attempt to signup the user using retrieved email, username etc from the third party
      # authentication system. See the corresponding django-allauth documentation
      # Defaults to False
      autoSignup:

      # A list of group names that users who signup via social accounts will be added to upon signup.
      # Groups listed here must already exist. If both the PAPERLESS_ACCOUNT_DEFAULT_GROUPS setting
      # and this setting are used, the user will be added to both sets of groups.
      # Defaults to None
      defaultGroups:

      # Disables the regular frontend username / password login, i.e. once you have setup SSO.
      # Note that this setting does not disable the Django admin login nor logging in with local
      # credentials via the API. To prevent access to the Django admin, consider blocking /admin/
      # in your web server or reverse proxy configuration.
      # You can optionally also automatically redirect users to the SSO login with
      # PAPERLESS_REDIRECT_LOGIN_TO_SSO.
      # Defaults to False
      disableRegularLogin:

      # This variable is used to setup login and signup via social account providers which are
      # compatible with django-allauth. See the corresponding django-allauth documentation for a list
      # of provider configurations. You will also need to include the relevant Django 'application'
      # inside the PAPERLESS_APPS setting to activate that specific authentication provider
      # (e.g. allauth.socialaccount.providers.openid_connect for the OIDC Connect provider).
      # Defaults to None, which does not enable any third party authentication systems.
      providers:

      # When this setting is enabled users will automatically be redirected (using javascript) to the
      # first SSO provider login. You may still want to disable the frontend login form for clarity.
      # Defaults to False
      redirectLogin:

  documentConsumption:
    # Sets the barcode scanner used for barcode functionality.
    # Currently, "PYZBAR" (the default) or "ZXING" might be selected. If you have problems that your
    # Barcodes/QR-Codes are not detected (especially with bad scan quality and/or small codes), try the other one.
    barcodeScanner:

    # When the consumer detects a duplicate document, it will not touch the original document. This default behavior can be changed here.
    # Defaults to false.
    deleteDuplicates:

    # If set (to anything), this completely disables the directory-based consumer in docker.
    # If you don't plan to consume documents via the consumption directory, you can disable the consumer
    # to save resources.
    disableConsumer:

    # By default, paperless ignores certain files and folders in the consumption directory, such as system files
    # created by the Mac OS or hidden folders some tools use to store data.
    # This can be adjusted by configuring a custom json array with patterns to exclude.
    # For example, .DS_STORE/* will ignore any files found in a folder named .DS_STORE, including .DS_STORE/bar.pdf
    # and foo/.DS_STORE/bar.pdf
    # A pattern like ._* will ignore anything starting with ._, including: ._foo.pdf and ._bar/foo.pdf
    # Defaults to [".DS_Store", ".DS_STORE", "._*", ".stfolder/*", ".stversions/*", ".localized/*", "desktop.ini",
    # "@eaDir/*", "Thumbs.db"].
    ignorePatterns:

    # After a document is consumed, Paperless can trigger an arbitrary script if you like.
    # This script will be provided data for it to work with via the environment.
    # For more information, take a look at Post-consumption script.
    # The default is blank, which means nothing will be executed.
    postConsumeScript:

    # After some initial validation, Paperless can trigger an arbitrary script if you like before beginning
    # consumption. This script will be provided data for it to work with via the environment.
    # For more information, take a look at pre-consumption script.
    # The default is blank, which means nothing will be executed.
    preConsumeScript:

    # Enable recursive watching of the consumption directory. Paperless will then pickup files from files in
    # subdirectories within your consumption directory as well.
    # Defaults to false.
    recursive:

    # Set the names of subdirectories as tags for consumed files. E.g. <CONSUMPTION_DIR>/foo/bar/file.pdf
    # will add the tags "foo" and "bar" to the consumed file. Paperless will create any tags that don't exist yet.
    # This is useful for sorting documents with certain tags such as car or todo prior to consumption.
    # These folders won't be deleted.
    # PAPERLESS_CONSUMER_RECURSIVE must be enabled for this to work.
    # Defaults to false.
    subdirsAsTags:

  filenames:
    # Changes the filenames paperless uses to store documents in the media directory.
    # See File name handling for details.
    # Default is none, which disables this feature.
    format:

    # Tells paperless to replace placeholders in PAPERLESS_FILENAME_FORMAT that would resolve
    # to 'none' to be omitted from the resulting filename. This also holds true for directory names.
    # See File name handling for details.
    # Defaults to false which disables this feature.
    formatRemoveNone:

  hosting:
    # Paperless uses this to make session tokens. If you expose paperless on the internet,
    # you need to change this, since the default secret is well known.
    # Use any sequence of characters. The more, the better. You don't need to remember this.
    # Just face-roll your keyboard.
    secretKey:

    # Configures the Django setting USE_X_FORWARDED_HOST which may be needed for hosting behind a proxy.
    # Defaults to false.
    useXForwardHost: true

    # Configures the Django setting USE_X_FORWARDED_PORT which may be needed for hosting behind a proxy.
    # Defaults to False
    useXForwardPort: true

  ocr:
    # Tells paperless to use unpaper to clean any input document before sending it to tesseract.
    # This uses more resources, but generally results in better OCR results. The following modes are available:
    # - clean: Apply unpaper.
    # - clean-final: Apply unpaper, and use the cleaned images to build the output file instead of
    #                the original images.
    # - none: Do not apply unpaper.
    # Defaults to clean.
    # Note: clean-final is incompatible with ocr mode redo. When both clean-final and the ocr mode redo
    #       is configured, clean is used instead.
    clean:

    # Controls the Ghostscript color conversion strategy when creating the archive file. This setting will
    # only be utilized if the output is a version of PDF/A.
    # Valid options are CMYK, Gray, LeaveColorUnchanged, RGB or UseDeviceIndependentColor.
    # You can find more on the settings here in the Ghostscript documentation.
    # WARNING: Utilizing some of the options may result in errors when creating archive files from PDFs.
    colorConversionStrategy:

    # Tells paperless to correct skewing (slight rotation of input images mainly due to improper scanning)
    # Defaults to true, which enables this feature.
    # Note: Deskewing is incompatible with ocr mode redo.
    #       Deskewing will get disabled automatically if redo is used as the ocr mode.
    deskew:

    # Paperless will OCR any images you put into the system and convert them into PDF documents.
    # This is useful if your scanner produces images. In order to do so, paperless needs to know the DPI of
    # the image. Most images from scanners will have this information embedded and paperless will detect and
    # use that information. In case this fails, it uses this value as a fallback.
    # Set this to the DPI your scanner produces images at.
    # Defaults to unset, which will automatically calculate image DPI so that the produced PDF documents
    # are A4 sized.
    imageDpi:

    # Customize the language that paperless will attempt to use when parsing documents.
    # It should be a 3-letter code, see the list of languages Tesseract supports.
    # Set this to the language most of your documents are written in.
    # This can be a combination of multiple languages such as deu+eng, in which case Tesseract will use
    # whatever language matches best. Keep in mind that Tesseract uses much more CPU time with multiple
    # languages enabled.
    # If you are including languages that are not installed by default, you will need to also set
    # PAPERLESS_OCR_LANGUAGES for docker deployments or install the tesseract language packages manually
    # for bare metal installations.
    # Defaults to "eng".
    language:

    # Paperless will raise a warning when OCRing images which are over this limit and will not OCR images
    # which are more than twice this limit. Note this does not prevent the document from being consumed,
    # but could result in missing text content.
    # If unset, will default to the value determined by Pillow.
    # Setting this value to 0 will entirely disable the limit. See the below warning.
    # Note: Increasing this limit could cause Paperless to consume additional resources when consuming a file.
    #       Be sure you have sufficient system resources.
    # WARNING: The limit is intended to prevent malicious files from consuming system resources and causing
    #          crashes and other errors. Only change this value if you are certain your documents are not
    #          malicious and you need the text which was not OCRed
    maxImagePixels:

    # Tell paperless when and how to perform ocr on your documents. Three modes are available:
    # - skip: Paperless skips all pages and will perform ocr only on pages where no text is present. 
    #         This is the safest option.
    # - redo: Paperless will OCR all pages of your documents and attempt to replace any existing text
    #         layers with new text. This will be useful for documents from scanners that already performed
    #         OCR with insufficient results. It will also perform OCR on purely digital documents.
    #         This option may fail on some documents that have features that cannot be removed, such as forms.
    #         In this case, the text from the document is used instead.
    # - force: Paperless rasterizes your documents, converting any text into images and puts the OCRed text on
    #          top. This works for all documents, however, the resulting document may be significantly larger
    #          and text won't appear as sharp when zoomed in.
    # The default is skip, which only performs OCR when necessary and always creates archived documents.
    mode:

    # Specify the the type of PDF documents that paperless should produce.
    # - pdf: Modify the PDF document as little as possible.
    # - pdfa: Convert PDF documents into PDF/A-2b documents, which is a subset of the entire PDF specification
    #         and meant for storing documents long term.
    # - pdfa-1, pdfa-2, pdfa-3 to specify the exact version of PDF/A you wish to use.
    # If not specified, pdfa is used. Remember that paperless also keeps the original input file as well as the
    # archived version.
    outputType:

    # Tells paperless to use only the specified amount of pages for OCR. Documents with less than the specified
    # amount of pages get OCR'ed completely.
    # Specifying 1 here will only use the first page.
    # The value must be greater than or equal to 1 to be used.
    # When combined with PAPERLESS_OCR_MODE=redo or PAPERLESS_OCR_MODE=force, paperless will not modify any text
    # it finds on excluded pages and copy it verbatim.
    # Defaults to unset, which disables this feature and always uses all pages.
    pages:

    # Tells paperless to correct page rotation (90°, 180° and 270° rotation).
    # If you notice that paperless is not rotating incorrectly rotated pages (or vice versa), try adjusting
    # the threshold up or down (see below).
    # Defaults to true, which enables this feature.
    rotatePages:

    # Adjust the threshold for automatic page rotation by PAPERLESS_OCR_ROTATE_PAGES. This is an arbitrary
    # value reported by tesseract. "15" is a very conservative value, whereas "2" is a very aggressive option
    # and will often result in correctly rotated pages being rotated as well.
    # Defaults to "12".
    rotatePagesThreshold:

    # Specify when you would like paperless to skip creating an archived version of your documents.
    # This is useful if you don't want to have two almost-identical versions of your documents in the media folder.
    # - never: Never skip creating an archived version.
    # - with_text: Skip creating an archived version for documents that already have embedded text.
    # - always: Always skip creating an archived version.
    # The default is never.
    skipArchiveFile:

  optionalServices:
    # Enable (or disable) the Tika parser.
    tikaEnabled:

  tweaks:
    # A comma-separated list of Django apps to be included in Django's INSTALLED_APPS.
    # This setting should be used with caution!
    # Defaults to None, which does not add any additional apps.
    apps:

    # On smaller systems, or even in the case of Very Large Documents, the consumer may explode, complaining
    # about how it's "unable to extend pixel cache". In such cases, try setting this to a reasonably low value,
    # like 32. The default is to use whatever is necessary to do everything without writing to disk, and units
    # are in megabytes.
    # For more information on how to use this value, you should search the web for "MAGICK_MEMORY_LIMIT".
    # Defaults to 0, which disables the limit.
    convertMemoryLimit:

    cron:
      # Configures the scheduled email fetching frequency. The value should be a valid crontab(5) expression
      # describing when to run.
      # If set to the string "disable", no emails will be fetched automatically.
      # Defaults to "*/10 * * * *" or every ten minutes.
      emailTask:

      # Configures the scheduled search index update frequency. The value should be a valid crontab(5) expression
      # describing when to run.
      # If set to the string "disable", the search index will not be automatically updated.
      # Defaults to "0 0 * * *"" or daily at midnight.
      indexTask:

      # Configures the scheduled automatic classifier training frequency. The value should be a valid crontab(5)
      # expression describing when to run.
      # If set to the string "disable", the classifier will not be trained automatically.
      # Defaults to "5 */1 * * *" or every hour at 5 minutes past the hour.
      trainTask:

      # Configures the scheduled sanity checker frequency.
      # If set to the string "disable", the sanity checker will not run automatically.
      # Defaults to "30 0 * * sun" or Sunday at 30 minutes past midnight.
      sanityTask:

    # Configures the maximum size of an image PIL will allow to load without warning or error.
    # If unset, will default to the value determined by Pillow.
    # Defaults to None, which does change the limit
    # WARNING: This limit is designed to prevent denial of service from malicious files.
    #          It should only be raised or disabled in certain circumstances and with great care.
    maxImagePixels:

    # Paperless does multiple things in the background: Maintain the search index, maintain the automatic
    # matching algorithm, check emails, consume documents, etc. This variable specifies how many things it
    # will do in parallel.
    # Defaults to 1
    taskWorkers:

    # Paperless uses multiple threads when consuming documents to speed up OCR. This variable specifies how
    # many pages paperless will process in parallel on a single document.
    # WARNING: Ensure that the product of workers * threads per worker does not exceed your CPU core count 
    #          or else paperless will be extremely slow. If you want paperless to process many documents in
    #          parallel, choose a high worker count. If you want paperless to process very large documents faster,
    #          use a higher thread per worker count.
    threadsPerWorker:

    # Set the time zone here. See more details on why and how to set it in the Django project documentation
    # for details on how to set it.
    # Defaults to UTC.
    timeZone:

    # Machines with few cores or weak ones might not be able to finish OCR on large documents within the default
    # 1800 seconds. So extending this timeout may prove to be useful on weak hardware setups.
    workerTimeout:

ingress:
  # Put your FQDN for hosting here
  endpoint: paperless.domain.com

  # If using cert-manager.io with a cluster issuer, indicate the name here.
  certManagerClusterIssuer:

  # Indicate the maximum upload size for the proxy.
  maxUploadSize: "150m"

volumes:
  - name: "paperless-consume"
    capacity: "100Mi"
    component: paperless
    storageClassName: ""

  - name: "paperless-data"
    capacity: "100Mi"
    component: paperless
    storageClassName: ""

  - name: "paperless-export"
    capacity: "100Mi"
    component: paperless
    storageClassName: ""

  - name: "paperless-media"
    capacity: "100Mi"
    component: paperless
    storageClassName: ""

  - name: "redis-data"
    capacity: "100Mi"
    component: redis
    storageClassName: ""

paperless:
  deployment:
    image:
      repository: ghcr.io/paperless-ngx/paperless-ngx
      tag: latest
    volumes:
      - name: paperless-consume
        mountPath: /usr/src/paperless/consume
      - name: paperless-data
        mountPath: /usr/src/paperless/data
      - name: paperless-export
        mountPath: /usr/src/paperless/export
      - name: paperless-media
        mountPath: /usr/src/paperless/media
  service:
    ports:
      - 8000

redis:
  deployment:
    image:
      repository: docker.io/library/redis
      tag: "7"
    volumes:
      - name: "redis-data"
        mountPath: "/data"
  service:
    ports:
      - 6379

tika:
  deployment:
    image:
      repository: apache/tika
      tag: latest
  service:
    ports:
      - 9998

gotenberg:
  deployment:
    image:
      repository: gotenberg/gotenberg
      tag: "7.10"
  service:
    ports:
      - 3000

networkPolicy:
  # Indicate the K8s namespace to allow ingress from.
  allowIngressFromNamespace: ingress-nginx
